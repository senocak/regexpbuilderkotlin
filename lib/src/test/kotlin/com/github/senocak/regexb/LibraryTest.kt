/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.senocak.regexb

import kotlin.test.Test
import kotlin.test.assertFalse
import kotlin.test.assertTrue
import org.junit.jupiter.api.Nested

class LibraryTest {
    @Nested
    inner class Validation {
        @Test
        fun givenValidInputStringForValidation_whenMatches_thenAssertTrue() {
            // Given
            val regExp: RegExp = RegExpBuilder()
                .startOfInput()
                .startOfInput()
                .exactly(n = 4).digits()
                .then(s = "_")
                .exactly(n = 2).digits()
                .then(s = "_")
                .min(n = 3).max(n = 10).letters()
                .then(s = ".")
                .anyOf(r = listOf("png", "jpg", "gif"))
                .endOfInput()
                .getRegExp()
            // Then
            assertTrue {
                // When
                regExp.matches(inputString0 = "2020_10_hund.jpg")
            }
        }

        @Test
        fun givenInValidInputStringForValidation_whenMatches_thenAssertFalse() {
            // Given
            val regExp: RegExp = RegExpBuilder()
                .startOfInput()
                .startOfInput()
                .exactly(n = 4).digits()
                .then(s = "_")
                .exactly(n = 2).digits()
                .then(s = "_")
                .min(n = 3).max(n = 10).letters()
                .then(s = ".")
                .anyOf(r = listOf("png", "jpg", "gif"))
                .endOfInput()
                .getRegExp()
            // Then
            assertFalse {
                // When
                regExp.matches(inputString0 = "123_00_nein.gif")
            }
        }
    }

    @Nested
    inner class Search {
        @Test
        fun givenValidInputStringForReplace_whenMatches_thenAssertTrue() {
            // Given
            val text = """Lorem ipsum dolor sit amet, consetetur sadipscing elitr,
                sed diam nonumy SomeFile.pdf eirmod tempor invidunt ut labore et dolore
                magna aliquyam erat, sed diam voluptua. At vero eos et accusam lorem
                et justo duo dolores et ea rebum. doc_04.pdf Stet clita kasd File.doc."""
            val regExp: RegExp = RegExpBuilder()
                .multiLine()
                .globalMatch()
                .min(n = 1).max(n = 10).anythingBut(s = " ")
                .anyOf(r = listOf(".pdf", ".doc"))
                .getRegExp()
            println(regExp.expression)
            // When
            val matches: List<String> = regExp.findIn(inputString0 = text)
            // Then
            assertTrue { matches.size == 3 }
            assertTrue { matches[0] == "SomeFile.pdf" }
            assertTrue { matches[1] == "doc_04.pdf" }
            assertTrue { matches[2] == "File.doc" }
            assertFalse { matches[2] == "File.kt" }
        }
    }

    @Nested
    inner class Replace {
        @Test
        fun givenValidInputStringForValidation_whenMatches_thenAssertTrue() {
            // Given
            val regExp: RegExp = RegExpBuilder()
                .min(n = 1)
                .max(n = 10)
                .digits()
                .getRegExp()
            // When
            val actual: String = regExp.replace(inputString0 = "98 bottles of beer on the wall") {
                match: String -> (match.toInt() + 1).toString()
            }
            // Then
            assertFalse { "98 bottles of beer on the wall" == actual }
            assertTrue { "99 bottles of beer on the wall" == actual }
        }
    }

    @Test fun testRegExp(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 1)
            .of(s = "p")
            .getRegExp()
            .run {
                // Then
                assertTrue {
                    // When
                    this.regexFlags == "m" && this.expression == "(?:^)(?:(?:\\Qp\\E){1,1})"
                }
            }

    @Test fun testMoney(): Unit =
        RegExpBuilder()
            .find(s = "€")
            .min(n = 1).digits()
            .then(s = ",")
            .digit()
            .digit()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "€128,99") }
                assertTrue { this.matches(inputString0 = "€81,99") }
                assertFalse { this.matches(inputString0 = "€8,9")}
                assertFalse { this.matches(inputString0 = "12.123.8,99 €") }
            }

    @Test fun testMoney2(): Unit =
        RegExpBuilder()
            .find(s = "€")
            .exactly(n = 1).whitespace()
            .min(n = 1).digits()
            .then(s = ".")
            .exactly(n = 3).digits()
            .then(s = ",")
            .digit()
            .digit()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "€ 1.228,99") }
                assertTrue { this.matches(inputString0 = "€ 452.000,99") }
                assertFalse { this.matches(inputString0 = "€8,9") }
                assertFalse { this.matches(inputString0 = "12.123.8,99 €") }
            }

    @Test fun testAllMoney() {
        val builder1: RegExpBuilder = RegExpBuilder()
            .find(s = "€")
            .min(n = 1).digits()
            .then(s = ",")
            .digit()
            .digit()
            .also {
                assertTrue { it.getRegExp().matches(inputString0 = "€128,99") }
                assertTrue { it.getRegExp().matches(inputString0 = "€81,99") }
            }

        val builder2: RegExpBuilder = RegExpBuilder()
            .getNew()
            .find(s = "€")
            .min(n = 1).digits()
            .then(s = ".")
            .exactly(n = 3).digits()
            .then(s = ",")
            .digit()
            .digit()
            .also {
                assertTrue { it.getRegExp().matches(inputString0 = "€1.228,99") }
                assertTrue { it.getRegExp().matches(inputString0 = "€452.000,99") }
            }

        RegExpBuilder()
            .getNew()
            .eitherFind(r = builder1)
            .orFind(r = builder2)
            .also {
                assertTrue { it.getRegExp().matches(inputString0 = "€128,99") }
                assertTrue { it.getRegExp().matches(inputString0 = "€81,99") }
                assertTrue { it.getRegExp().matches(inputString0 = "€1.228,99") }
                assertTrue { it.getRegExp().matches(inputString0 = "€452.000,99") }
            }
        }

    @Test fun testMaybe(): Unit =
        RegExpBuilder()
            .startOfLine()
            .notDigit()
            .maybe(s = "a")
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "aabba1") }
                assertFalse { this.matches(inputString0 = "12aabba1") }
            }

    @Test fun testMaybeSome(): Unit =
        RegExpBuilder()
            .startOfLine()
            .notDigit()
            .maybeSome(s = listOf("a", "b", "c"))
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "aabba1") }
                assertFalse { this.matches(inputString0 = "12aabba1") }
            }

    @Test fun testSome(): Unit =
        RegExpBuilder()
            .startOfLine()
            .notDigit()
            .some(s = listOf("a", "b", "c"))
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "aabba1") }
                assertFalse { this.matches(inputString0 = "12aabba1") }
            }

    @Test fun testLettersDigits(): Unit =
        RegExpBuilder()
            .startOfLine()
            .min(n = 3)
            .letters()
            .append(r = RegExpBuilder().getNew().min(n = 2).digits())
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "asf24") }
                assertFalse { this.matches(inputString0 = "af24") }
                assertFalse { this.matches(inputString0 = "afs4") }
                assertFalse { this.matches(inputString0 = "234asas") }
            }

    @Test fun testNotLetter(): Unit =
        RegExpBuilder()
            .startOfLine()
            .notLetter()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "234asd") }
                assertFalse { this.matches(inputString0 = "asd425") }
            }

    @Test fun testNotLetters(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 1)
            .notLetters()
            .getRegExp()
            .run {
                assertTrue { this.matches("234asd") }
                assertTrue { this.matches("@234asd") }
                assertFalse { this.matches("asd425") }
            }

    @Test fun testNotDigit(): Unit =
        RegExpBuilder()
            .startOfLine()
            .notDigit()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a234asd") }
                assertFalse { this.matches(inputString0 = "45asd") }
            }

    @Test fun testNotDigits(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 1)
            .notDigits()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a234asd") }
                assertTrue { this.matches(" inputString0 = @234asd") }
                assertFalse { this.matches(inputString0 = "425asd") }
            }

    @Test fun testAny(): Unit =
        RegExpBuilder()
            .startOfLine()
            .any()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a.jpg") }
                assertTrue { this.matches(inputString0 = "a.b_asdasd") }
                assertTrue { this.matches(inputString0 = "4") }
                assertFalse { this.matches(inputString0 = "") }
            }

    @Test fun testOfAny(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 2)
            .ofAny()
            .find(s = "_")
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "12_123123.jpg") }
                assertTrue { this.matches(inputString0 = "ab_asdasd") }
                assertFalse { this.matches(inputString0 = "425asd") }
            }

    @Test fun testOfAny2(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(3).ofAny()
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "pqr") }
            }

    @Test fun testAnything(): Unit =
        RegExpBuilder()
            .startOfLine()
            .anything()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a.jpg") }
                assertTrue { this.matches(inputString0 = "a.b_asdasd") }
                assertTrue { this.matches(inputString0 = "4") }
            }

    @Test fun testAnythingBut(): Unit =
        RegExpBuilder()
            .startOfInput()
            .anythingBut(s = "admin")
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a.jpg") }
                assertTrue { this.matches(inputString0 = "a.b_asdasd") }
                assertTrue { this.matches(inputString0 = "4") }
                assertFalse { this.matches(inputString0 = "admin") }
            }

    @Test fun testAnythingBut2(): Unit =
        RegExpBuilder()
            .startOfLine()
            .anythingBut(s = "Y")
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a.jpg") }
                assertTrue { this.matches(inputString0 = "a.b_asdasd") }
                assertTrue { this.matches(inputString0 = "4") }
                assertFalse { this.matches(inputString0 = "YY") }
                assertFalse { this.matches(inputString0 = "Y") }
            }

    @Test fun testNeitherNor(): Unit =
        RegExpBuilder()
            .startOfLine()
            .neither(r = RegExpBuilder().getNew().exactly(1).of("milk"))
            .nor(r = RegExpBuilder().getNew().exactly(1).of("juice"))
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "beer") }
                assertFalse { this.matches(inputString0 = "milk") }
                assertFalse { this.matches(inputString0 = "juice") }
            }

    @Test fun testNeitherNor2(): Unit =
        RegExpBuilder()
            .startOfLine()
            .neither(r = "milk")
            .min(n = 0)
            .ofAny()
            .nor(r = RegExpBuilder().getNew().exactly(1).of("juice"))
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "beer") }
                assertFalse { this.matches(inputString0 = "milk") }
                assertFalse { this.matches(inputString0 = "juice") }
            }

    @Test fun testLowerCasew(): Unit=
        RegExpBuilder()
            .startOfLine()
            .lowerCaseLetter()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a24") }
                assertFalse { this.matches(inputString0 = "234a") }
                assertFalse { this.matches(inputString0 = "A34") }
            }

    @Test fun testLowerCaseLetters(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 2)
            .lowerCaseLetters()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "aa24") }
                assertFalse { this.matches(inputString0 = "aAa234a") }
                assertFalse { this.matches(inputString0 = "234a") }
                assertFalse { this.matches(inputString0 = "A34") }
            }

    @Test fun testUpperCaseLetter(): Unit =
        RegExpBuilder()
            .startOfLine()
            .upperCaseLetter()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "A24") }
                assertFalse { this.matches(inputString0 = "aa234a") }
                assertFalse { this.matches(inputString0 = "34aa") }
            }

    @Test fun testUpperCaseLetters(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 2)
            .upperCaseLetters()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "AA24") }
                assertFalse { this.matches(inputString0 = "aAa234a") }
                assertFalse { this.matches(inputString0 = "234a") }
                assertFalse { this.matches(inputString0 = "a34") }
            }

    @Test fun testLetterDigit(): Unit =
        RegExpBuilder()
            .ignoreCase()
            .globalMatch()
            .startOfLine()
            .letter()
            .append(r = RegExpBuilder().getNew().digit())
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a5") }
                assertFalse { this.matches(inputString0 = "5a") }
            }

    @Test fun testTab(): Unit =
        RegExpBuilder()
            .startOfLine()
            .tab()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "\tp") }
                assertFalse { this.matches(inputString0 = "q\tp\t") }
                assertFalse { this.matches(inputString0 = "p\t") }
            }

    @Test fun testTab2(): Unit  =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 1).of(s = "p")
            .tab()
            .exactly(n = 1).of(s = "q")
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "p\tq") }
            }

    @Test fun testTabs(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 2)
            .tabs()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "\t\tp") }
                assertFalse { this.matches(inputString0 = "\tp") }
                assertFalse { this.matches(inputString0 = "q\tp\t") }
                assertFalse { this.matches(inputString0 = "p\t") }
            }

    @Test fun testWhiteSpace(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 2).whitespace()
            .then(s = "p")
            .then(s = "d")
            .then(s = "r")
            .exactly(n = 1).whitespace()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "  pdr ") }
                assertFalse { this.matches(inputString0 = " pdr ") }
                assertFalse { this.matches(inputString0 = "  pd r ") }
                assertFalse { this.matches(inputString0 = " p dr ") }
            }

    @Test fun testMoreWhiteSpace(): Unit =
        RegExpBuilder()
            .startOfLine()
            .whitespace()
            .then(s = "p")
            .then(s = "d")
            .then(s = "r")
            .exactly(n = 1).whitespace()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "\tpdr\t") }
            }

    @Test fun testNotWhitespace(): Unit =
        RegExpBuilder()
            .startOfLine()
            .notWhitespace()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a234asd") }
                assertFalse { this.matches(inputString0 = " 45asd") }
                assertFalse { this.matches(inputString0 = "\t45asd") }
            }

    @Test fun testNotWhitespace2(): Unit  =
        RegExpBuilder()
            .startOfLine()
            .min(n = 1)
            .notWhitespace()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "a234asd") }
                assertFalse { this.matches(inputString0 = " 45asd") }
                assertFalse { this.matches(inputString0 = "\t45asd") }
            }

    @Test fun testLineBreak(): Unit =
        RegExpBuilder()
            .startOfLine()
            .lineBreak()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "\n\ra234asd") }
                assertTrue { this.matches(inputString0 = "\na234asd") }
                assertTrue { this.matches(inputString0 = "\ra234asd") }
                assertFalse { this.matches(inputString0 = " 45asd") }
                assertFalse { this.matches(inputString0 = "\t45asd") }
            }

    @Test fun testLineBreaks(): Unit =
        RegExpBuilder()
            .startOfLine()
            .min(n = 2)
            .lineBreaks()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "\n\ra234asd") }
                assertTrue { this.matches(inputString0 = "\n\na234asd") }
                assertTrue { this.matches(inputString0 = "\r\ra234asd") }
                assertFalse { this.matches(inputString0 = " 45asd") }
                assertFalse { this.matches(inputString0 = "\t45asd") }
            }

    @Test fun testStartOfLine() : Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 1)
            .of(s = "p")
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "p") }
                assertFalse { this.matches(inputString0 = "qp") }
            }

    @Test fun testEndOfLine(): Unit =
        RegExpBuilder()
            .exactly(n = 1)
            .of(s = "p")
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "p") }
                assertFalse { this.matches(inputString0 = "pq") }
            }

    @Test fun testEitherLikeOrLike(): Unit =
        RegExpBuilder()
            .startOfLine()
            .eitherFind(r = RegExpBuilder().getNew().exactly(n = 1).of(s = "p"))
            .orFind(r = RegExpBuilder().getNew().exactly(n = 2).of(s = "q"))
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "p") }
                assertTrue { this.matches(inputString0 = "qq") }
                assertFalse { this.matches(inputString0 = "pqq") }
                assertFalse { this.matches(inputString0 = "qqp") }
            }

    @Test fun testOrLikeChain(): Unit =
        RegExpBuilder()
            .eitherFind(r = RegExpBuilder().getNew().exactly(n = 1).of(s = "p"))
            .orFind(r = RegExpBuilder().getNew().exactly(n = 1).of(s = "q"))
            .orFind(r = RegExpBuilder().getNew().exactly(n = 1).of(s = "r"))
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "p") }
                assertTrue { this.matches(inputString0 = "q") }
                assertTrue { this.matches(inputString0 = "r") }
                assertFalse { this.matches(inputString0 = "s") }
            }

    @Test fun testEitherOr(): Unit =
        RegExpBuilder()
            .eitherFind(r = "p")
            .orFind(r = "q")
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "p") }
                assertTrue { this.matches(inputString0 = "q") }
                assertFalse { this.matches(inputString0 = "r") }
            }

    @Test fun testAnyOf(): Unit =
        RegExpBuilder()
            .anyOf(r = listOf("abc", "def", "q"))
            //.orFind(r = RegExpBuilder().getNew().exactly(2).digits())
            .getRegExp()
            .run {
                println(RegExpBuilder().getNew().exactly(2).digits().getRegExp().expression)
                println(this.expression)
                assertTrue { this.matches(inputString0 = "abc") }
                assertTrue { this.matches(inputString0 = "def") }
                assertTrue { this.matches(inputString0 = "q") }
                //assertTrue { this.matches(inputString0 = "22") }
                assertFalse { this.matches(inputString0 = "r") }
                assertFalse { this.matches(inputString0 = "1") }

                val regEx: RegExp = RegExpBuilder()
                    .getNew()
                    .anyOf(r = listOf())
                    .getRegExp()
                assertTrue { regEx.matches(inputString0 = "p") }
            }

    @Test fun testExactly(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 3).of(s = "p")
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "ppp") }
                assertFalse { this.matches(inputString0 = "pp") }
                assertFalse { this.matches(inputString0 = "pppp") }
            }

    @Test fun testMin(): Unit =
        RegExpBuilder()
            .startOfLine()
            .min(n = 2).of(s = "p")
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "pp") }
                assertTrue { this.matches(inputString0 = "ppp") }
                assertTrue { this.matches(inputString0 = "ppppppp") }
                assertFalse { this.matches(inputString0 = "p") }
            }

    @Test fun testMax(): Unit =
        RegExpBuilder()
            .startOfLine()
            .max(n = 3).of(s = "p")
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "p") }
                assertTrue { this.matches(inputString0 = "pp") }
                assertTrue { this.matches(inputString0 = "ppp") }
                assertFalse { this.matches(inputString0 = "pppp") }
                assertFalse { this.matches(inputString0 = "pppppppp") }
            }

    @Test fun testMinMax(): Unit =
        RegExpBuilder()
            .startOfLine()
            .min(n = 3).max(n = 7).of(s = "p")
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "ppp") }
                assertTrue { this.matches(inputString0 = "ppppp") }
                assertTrue { this.matches(inputString0 = "ppppppp") }
                assertFalse { this.matches(inputString0 = "pp") }
                assertFalse { this.matches(inputString0 = "p") }
                assertFalse { this.matches(inputString0 = "pppppppp") }
                assertFalse { this.matches(inputString0 = "pppppppppppp") }
            }

    @Test fun testOf(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 2).of(s = "p p p ")
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "p p p p p p ") }
                assertFalse { this.matches(inputString0 = "p p p p pp") }
            }

    @Test fun testOfGroup(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 3).of(s = "p").asGroup()
            .exactly(n = 1).of(s = "q").asGroup()
            .exactly(n = 1).ofGroup(n = 1)
            .exactly(n = 1).ofGroup(n = 2)
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "pppqpppq") }
            }

    @Test fun testGroupIncrement() {
            //aa--aa--
            val builder1: RegExpBuilder = RegExpBuilder()
                .exactly(n = 2).of(s = "a").asGroup()
                .exactly(n = 2).of(s = "-").asGroup()
                .exactly(n = 1).ofGroup(n = 1)
                .exactly(n = 1).ofGroup(n = 2)

            //bb--bb--
            val builder2: RegExpBuilder = RegExpBuilder()
                .exactly(n = 2).of(s = "b").asGroup()
                .exactly(n = 2).of(s = "-").asGroup()
                .exactly(n = 1).ofGroup(n = 1)
                .exactly(n = 1).ofGroup(n = 2)

            val builder3: RegExpBuilder = RegExpBuilder()
                .find(s = "123")

        RegExpBuilder()
            .startOfInput()
            .append(r = builder1)
            .append(r = builder2)
            .append(r = builder3)
            .endOfInput()
            .getRegExp()
                .run {
                    assertTrue { this.matches(inputString0 = "aa--aa--bb--bb--123") }
                    assertFalse { this.matches(inputString0 = "def123abc") }
                    assertFalse { this.matches(inputString0 = "abcabc") }
                    assertFalse { this.matches(inputString0 = "abcdef312") }
                }
        }

    @Test
    fun testNamedGroup(): Unit =
        RegExpBuilder()
            .exactly(n = 3)
            .digits()
            .asGroup(name = "numbers")
            .getRegExp()
            .run {
                println(this.expression)
                val res: List<String> = this.findIn(inputString0 = "hello-123-abc")
                println(res.toString())
                assertTrue { res.first { it == "123" }.isNotEmpty() }
            }

    @Test fun testFrom(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 3).from(s = listOf("p", "q", "r"))
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "ppp") }
                assertTrue { this.matches(inputString0 = "qqq") }
                assertTrue { this.matches(inputString0 = "ppq") }
                assertTrue { this.matches(inputString0 = "rqp") }
                assertFalse { this.matches(inputString0 = "pyy") }
            }

    @Test fun testNotFrom(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 3).notFrom(s = listOf("p", "q", "r"))
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "lmn") }
                assertFalse { this.matches(inputString0 = "mnq") }
            }

    @Test fun testLike(): Unit =
        RegExpBuilder()
            .startOfLine()
            .exactly(n = 2).like(
                r = RegExpBuilder().getNew()
                    .min(n = 1).of(s = "p")
                    .min(n = 2).of(s = "q")
            )
            .endOfLine()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "pqqpqq") }
                assertFalse { this.matches(inputString0 = "qppqpp") }
            }

    @Test fun testReluctantly(): Unit =
        RegExpBuilder()
            .exactly(n = 2).of(s = "p")
            .min(n = 2).ofAny().reluctantly()
            .exactly(n = 2).of(s = "p")
            .getRegExp()
            .run {
                val matches: List<String> = this.findIn(inputString0 = "pprrrrpprrpp");
                assertTrue { matches[0] == "pprrrrpp" }
            }

    @Test fun testAhead(): Unit =
        RegExpBuilder()
            .exactly(n = 1).of(s = "dart")
            .ahead(r = RegExpBuilder().getNew().exactly(n = 1).of(s = "lang"))
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "dartlang") }
                assertTrue { this.matches(inputString0 = "dartlanglang") }
                assertTrue { this.matches(inputString0 = "langdartlang") }
                assertFalse { this.matches(inputString0 = "dartpqr") }
                assertFalse { this.matches(inputString0 = "langdart") }
            }

    @Test fun testNotAhead(): Unit =
        RegExpBuilder()
            .exactly(n = 1).of(s = "dart")
            .notAhead(r = RegExpBuilder().getNew().exactly(n = 1).of(s = "pqr"))
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "dartlang") }
                assertFalse { this.matches(inputString0 = "dartpqr") }
            }

    @Test fun testAsGroup(): Unit =
        RegExpBuilder()
            .min(1).max(3).of("p")
            .exactly(1).of("dart").asGroup()
            .exactly(1).from(s = listOf("p", "q", "r"))
            .getRegExp()
            .run {
                val matches: List<String> = this.findIn(inputString0 = "pdartq")
                assertTrue { matches[1] == "dart" }
            }

    @Test fun testOptional(): Unit=
        RegExpBuilder()
            .min(n = 1).max(n = 3).of(s = "p")
            .exactly(n = 1).of(s = "dart")
            .optional(r = RegExpBuilder().getNew().exactly(n = 1).from(s = listOf("p", "q", "r")))
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "pdartq") }
            }

    @Test fun testDelimiter(): Unit =
        RegExpBuilder()
            .startOfInput()
            .exactly(n = 3).digits()
            .exactly(n = 1).of(s = "/")
            .exactly(n = 2).letters()
            .endOfInput()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "123/ab") }
            }

    @Test fun testSomething(): Unit =
        RegExpBuilder()
            .min(n = 1).max(n = 3).of(s = "p")
            .something()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "pphelloq") }
                assertFalse { this.matches(inputString0 = "p") }
            }

    @Test fun testAlias(): Unit =
        RegExpBuilder()
            .startOfLine()
            .upperCaseLetter()
            .getRegExp()
            .run {
                assertTrue { this.matches(inputString0 = "A24") }
                assertTrue { this.findIn(inputString0 = "A45").isNotEmpty() }
            }
}
